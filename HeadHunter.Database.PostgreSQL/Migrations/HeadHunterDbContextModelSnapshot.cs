// <auto-generated />
using System;
using HeadHunter.Database.PostgreSQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HeadHunter.Database.PostgreSQL.Migrations
{
    [DbContext(typeof(HeadHunterDbContext))]
    partial class HeadHunterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Building")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeadHunterParentId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.BillingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BillingTypes");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.DriverLicenseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DriverLicenseTypes");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Employer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AlternateUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Blacklisted")
                        .HasColumnType("boolean");

                    b.Property<long>("HeadHunterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("text");

                    b.Property<bool?>("Trusted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<string>("VacanciesUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("TypeId");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.EmployerBrandedDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BrandedDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId")
                        .IsUnique();

                    b.ToTable("EmployerBrandedDescriptions");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.EmployerDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId")
                        .IsUnique();

                    b.ToTable("EmployerDescriptions");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.EmployerIndustry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IndustryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("IndustryId");

                    b.ToTable("EmployerIndustries");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.EmployerInsiderInterview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InsiderInterviewId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("InsiderInterviewId");

                    b.ToTable("EmployerInsiderInterviews");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.EmployerLogo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Normal")
                        .HasColumnType("text");

                    b.Property<string>("Original")
                        .HasColumnType("text");

                    b.Property<string>("Small")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId")
                        .IsUnique();

                    b.ToTable("EmployerLogos");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.EmployerType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmployerTypes");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Employment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Employments");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Industry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeadHunterParentId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.InsiderInterview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("HeadHunterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InsiderInterviews");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.KeySkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("KeySkills");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.MetroLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AreaId")
                        .HasColumnType("uuid");

                    b.Property<string>("CityId")
                        .HasColumnType("text");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HexColor")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("MetroLines");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.MetroStation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<string>("LineId")
                        .HasColumnType("text");

                    b.Property<string>("LineName")
                        .HasColumnType("text");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<Guid>("MetroLineId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("StationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MetroLineId");

                    b.ToTable("MetroStations");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Phone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.ProfessionalRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProfessionalRoles");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeadHunterParentId")
                        .HasColumnType("text");

                    b.Property<bool?>("Laboring")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProfareaId")
                        .HasColumnType("text");

                    b.Property<string>("ProfareaName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Vacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AcceptHandicapped")
                        .HasColumnType("boolean");

                    b.Property<bool>("AcceptIncompleteResumes")
                        .HasColumnType("boolean");

                    b.Property<bool>("AcceptKids")
                        .HasColumnType("boolean");

                    b.Property<bool?>("AcceptTemporary")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("AddressId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowMessages")
                        .HasColumnType("boolean");

                    b.Property<string>("AlternateUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApplyAlternateUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BillingTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmploymentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasTest")
                        .HasColumnType("boolean");

                    b.Property<long>("HeadHunterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("InitialCreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("InsiderInterviewId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Premium")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ResponseLetterRequired")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AreaId");

                    b.HasIndex("BillingTypeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("EmploymentId");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("InsiderInterviewId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("TypeId");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyBrandedDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BrandedDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VacancyId")
                        .IsUnique();

                    b.ToTable("VacancyBrandedDescriptions");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VacancyId")
                        .IsUnique();

                    b.ToTable("VacancyContacts");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyContactPhone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PhoneId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("PhoneId");

                    b.ToTable("VacancyContactPhones");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VacancyId")
                        .IsUnique();

                    b.ToTable("VacancyDescriptions");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyDriverLicenseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DriverLicenseTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DriverLicenseTypeId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancyDriverLicenseTypes");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyKeySkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("KeySkillId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("KeySkillId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancyKeySkills");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancyLanguages");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyProfessionalRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfessionalRoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalRoleId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancyProfessionalRoles");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancySalary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("From")
                        .HasColumnType("numeric(18,6)");

                    b.Property<bool?>("Gross")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("To")
                        .HasColumnType("numeric(18,6)");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("VacancyId")
                        .IsUnique();

                    b.ToTable("VacancySalaries");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancySpecialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancySpecializations");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VacancyTypes");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyWorkingDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkingDayId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VacancyId");

                    b.HasIndex("WorkingDayId");

                    b.ToTable("VacancyWorkingDays");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyWorkingTimeInterval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkingTimeIntervalId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VacancyId");

                    b.HasIndex("WorkingTimeIntervalId");

                    b.ToTable("VacancyWorkingTimeIntervals");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyWorkingTimeMode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkingTimeModeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VacancyId");

                    b.HasIndex("WorkingTimeModeId");

                    b.ToTable("VacancyWorkingTimeModes");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.WorkingDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WorkingDays");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.WorkingTimeInterval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WorkingTimeIntervals");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.WorkingTimeMode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HeadHunterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WorkingTimeModes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Area", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Area", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Employer", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Area", "Area")
                        .WithMany("Employers")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.EmployerType", "Type")
                        .WithMany("Employers")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.EmployerBrandedDescription", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Employer", "Employer")
                        .WithOne("BrandedDescription")
                        .HasForeignKey("HeadHunter.Database.PostgreSQL.Entities.EmployerBrandedDescription", "EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.EmployerDescription", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Employer", "Employer")
                        .WithOne("Description")
                        .HasForeignKey("HeadHunter.Database.PostgreSQL.Entities.EmployerDescription", "EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.EmployerIndustry", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Employer", "Employer")
                        .WithMany("Industries")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Industry", "Industry")
                        .WithMany("Employers")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.EmployerInsiderInterview", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Employer", "Employer")
                        .WithMany("InsiderInterviews")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.InsiderInterview", "InsiderInterview")
                        .WithMany("Employers")
                        .HasForeignKey("InsiderInterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");

                    b.Navigation("InsiderInterview");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.EmployerLogo", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Employer", "Employer")
                        .WithOne("Logo")
                        .HasForeignKey("HeadHunter.Database.PostgreSQL.Entities.EmployerLogo", "EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Industry", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Industry", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.MetroLine", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Area", "Area")
                        .WithMany("MetroLines")
                        .HasForeignKey("AreaId");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.MetroStation", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.MetroLine", "Line")
                        .WithMany("Stations")
                        .HasForeignKey("MetroLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Specialization", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Specialization", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Vacancy", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Address", "Address")
                        .WithMany("Vacancies")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Area", "Area")
                        .WithMany("Vacancies")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.BillingType", "BillingType")
                        .WithMany("Vacancies")
                        .HasForeignKey("BillingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Department", "Department")
                        .WithMany("Vacancies")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Employer", "Employer")
                        .WithMany("Vacancies")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Employment", "Employment")
                        .WithMany("Vacancies")
                        .HasForeignKey("EmploymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Experience", "Experience")
                        .WithMany("Vacancies")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.InsiderInterview", "InsiderInterview")
                        .WithMany("Vacancies")
                        .HasForeignKey("InsiderInterviewId");

                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Schedule", "Schedule")
                        .WithMany("Vacancies")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.VacancyType", "Type")
                        .WithMany("Vacancies")
                        .HasForeignKey("TypeId");

                    b.Navigation("Address");

                    b.Navigation("Area");

                    b.Navigation("BillingType");

                    b.Navigation("Department");

                    b.Navigation("Employer");

                    b.Navigation("Employment");

                    b.Navigation("Experience");

                    b.Navigation("InsiderInterview");

                    b.Navigation("Schedule");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyBrandedDescription", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Vacancy", "Vacancy")
                        .WithOne("BrandedDescription")
                        .HasForeignKey("HeadHunter.Database.PostgreSQL.Entities.VacancyBrandedDescription", "VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyContact", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Vacancy", "Vacancy")
                        .WithOne("Contact")
                        .HasForeignKey("HeadHunter.Database.PostgreSQL.Entities.VacancyContact", "VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyContactPhone", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.VacancyContact", "Contact")
                        .WithMany("Phones")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Phone", "Phone")
                        .WithMany("VacancyContacts")
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyDescription", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Vacancy", "Vacancy")
                        .WithOne("Description")
                        .HasForeignKey("HeadHunter.Database.PostgreSQL.Entities.VacancyDescription", "VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyDriverLicenseType", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.DriverLicenseType", "DriverLicenseType")
                        .WithMany("Vacancies")
                        .HasForeignKey("DriverLicenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Vacancy", "Vacancy")
                        .WithMany("DriverLicenseTypes")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DriverLicenseType");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyKeySkill", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.KeySkill", "KeySkill")
                        .WithMany("Vacancies")
                        .HasForeignKey("KeySkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Vacancy", "Vacancy")
                        .WithMany("KeySkills")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KeySkill");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyLanguage", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Language", "Language")
                        .WithMany("Vacancies")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Vacancy", "Vacancy")
                        .WithMany("Languages")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyProfessionalRole", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.ProfessionalRole", "ProfessionalRole")
                        .WithMany("Vacancies")
                        .HasForeignKey("ProfessionalRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Vacancy", "Vacancy")
                        .WithMany("ProfessionalRoles")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfessionalRole");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancySalary", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Currency", "Currency")
                        .WithMany("Salaries")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Vacancy", "Vacancy")
                        .WithOne("Salary")
                        .HasForeignKey("HeadHunter.Database.PostgreSQL.Entities.VacancySalary", "VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancySpecialization", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Specialization", "Specialization")
                        .WithMany("Vacancies")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Vacancy", "Vacancy")
                        .WithMany("Specializations")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyWorkingDay", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Vacancy", "Vacancy")
                        .WithMany("WorkingDays")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.WorkingDay", "WorkingDay")
                        .WithMany("Vacancies")
                        .HasForeignKey("WorkingDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vacancy");

                    b.Navigation("WorkingDay");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyWorkingTimeInterval", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Vacancy", "Vacancy")
                        .WithMany("WorkingTimeIntervals")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.WorkingTimeInterval", "WorkingTimeInterval")
                        .WithMany("Vacancies")
                        .HasForeignKey("WorkingTimeIntervalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vacancy");

                    b.Navigation("WorkingTimeInterval");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyWorkingTimeMode", b =>
                {
                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.Vacancy", "Vacancy")
                        .WithMany("WorkingTimeModes")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeadHunter.Database.PostgreSQL.Entities.WorkingTimeMode", "WorkingTimeMode")
                        .WithMany("Vacancies")
                        .HasForeignKey("WorkingTimeModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vacancy");

                    b.Navigation("WorkingTimeMode");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Address", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Area", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Employers");

                    b.Navigation("MetroLines");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.BillingType", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Currency", b =>
                {
                    b.Navigation("Salaries");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Department", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.DriverLicenseType", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Employer", b =>
                {
                    b.Navigation("BrandedDescription");

                    b.Navigation("Description");

                    b.Navigation("Industries");

                    b.Navigation("InsiderInterviews");

                    b.Navigation("Logo");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.EmployerType", b =>
                {
                    b.Navigation("Employers");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Employment", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Experience", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Industry", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Employers");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.InsiderInterview", b =>
                {
                    b.Navigation("Employers");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.KeySkill", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Language", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.MetroLine", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Phone", b =>
                {
                    b.Navigation("VacancyContacts");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.ProfessionalRole", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Schedule", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Specialization", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.Vacancy", b =>
                {
                    b.Navigation("BrandedDescription");

                    b.Navigation("Contact");

                    b.Navigation("Description");

                    b.Navigation("DriverLicenseTypes");

                    b.Navigation("KeySkills");

                    b.Navigation("Languages");

                    b.Navigation("ProfessionalRoles");

                    b.Navigation("Salary");

                    b.Navigation("Specializations");

                    b.Navigation("WorkingDays");

                    b.Navigation("WorkingTimeIntervals");

                    b.Navigation("WorkingTimeModes");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyContact", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.VacancyType", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.WorkingDay", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.WorkingTimeInterval", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HeadHunter.Database.PostgreSQL.Entities.WorkingTimeMode", b =>
                {
                    b.Navigation("Vacancies");
                });
#pragma warning restore 612, 618
        }
    }
}
